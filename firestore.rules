rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isJobCreator(jobId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/sharedJobs/$(jobId)) &&
        get(/databases/$(database)/documents/sharedJobs/$(jobId)).data.creatorId == request.auth.uid
      );
    }

    function isJobCreatorOrHasPendingInvitation(jobId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/sharedJobs/$(jobId)) &&
        get(/databases/$(database)/documents/sharedJobs/$(jobId)).data.creatorId == request.auth.uid ||
        hasPendingInvitation(jobId)
      );
    }

    function hasValidNotification(jobId) {
      let notifications = get(/databases/$(database)/documents/users/$(request.auth.uid)/notifications).data;
      return isAuthenticated() && notifications != null && notifications.jobId == jobId && notifications.status == 'pending';
    }

    function hasAcceptedInvitation(jobId) {
      let notifications = get(/databases/$(database)/documents/users/$(request.auth.uid)/notifications).data;
      return isAuthenticated() && notifications != null && notifications.jobId == jobId && notifications.status == 'accepted';
    }

    function hasPendingInvitation(jobId) {
      let notifications = get(/databases/$(database)/documents/users/$(request.auth.uid)/notifications).data;
      return isAuthenticated() && notifications != null && notifications.jobId == jobId && notifications.type == 'job_invitation' && notifications.status == 'pending';
    }

    // User document rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // User's jobs collection
      match /jobs/{jobId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      // User's time entries collection
      match /timeEntries/{entryId} {
        allow read, write: if isOwner(userId);
      }
      
      // User's expenses collection
      match /expenses/{expenseId} {
        allow read, write: if isOwner(userId);
      }

      // User's notifications collection
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated();
        allow delete: if isAuthenticated();
      }
    }

    // Shared jobs collection
    match /sharedJobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;

      // Shared job entries collection
      match /entries/{entryId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/sharedJobs/$(jobId)).data.creatorId == request.auth.uid
        );
      }

      // Shared job expenses collection
      match /expenses/{expenseId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/sharedJobs/$(jobId)).data.creatorId == request.auth.uid
        );
      }

      // Join requests subcollection
      match /joinRequests/{requestId} {
        allow read, write: if isAuthenticated();
      }
    }

    // Join requests collection (root level)
    match /joinRequests/{requestId} {
      allow read, write: if isAuthenticated();
    }

    // Notifications collection (root level)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
  }
}